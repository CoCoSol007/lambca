let one = \f.\x. (f x)
let two = \f.\x. (f (f x))

let succ = \n. \f. \x.(f ((n f) x))

eval (succ one)                 // 2 -> "\f.\x.f (f x)"
eval (succ (succ one))          // 3 -> "\f.\x.f (f (f x))"
let three = (succ (succ one))

let plus = \m.\n. \f.\x. ((m f) ((n f) x))

eval ((plus two) one)           // 3 -> "\f.\x.f (f (f x))"

let mult = \m.\n. \f. (m (n f))
eval ((mult two) two)           // 4 -> "\f.\x.f (f (f (f x)))"

let exp = \m.\n. (n m)
eval ((exp two) three)            // 4 -> "\f.\x.f (f (f (f x)))"